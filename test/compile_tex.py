# generate_tex.py (KeyError Fixed)
import subprocess
import shutil

class Book:
    """一个简单的类，用于封装一本书的所有信息。"""
    def __init__(self, title, author, quote, font_command=""):
        self.title = title
        self.author = author
        self.quote = quote
        self.font_command = font_command

class TexGenerator:
    """一个用于生成和编译 LaTeX 文档的类。"""
    def __init__(self, output_filename_base="generated_novel"):
        self.output_filename_base = output_filename_base
        self.tex_filename = f"{self.output_filename_base}.tex"
        self.books = []
        self.font_definitions = []
        
        # --- 这是核心改动：所有 LaTeX 的花括号都被加倍以进行转义 ---
        self._latex_header_template = r"""
% --- Auto-generated by Python ---
\documentclass[12pt, a4paper]{{article}}

\usepackage{{fontspec}}
\usepackage[margin=1in]{{geometry}}

% --- 设置文档的主要英文字体 ---
\setmainfont{{EB Garamond}}

% --- 动态字体定义 ---
{font_definitions}

% --- 文档信息 ---
\title{{A Test of Typographic Styles (Generated by Python)}}
\author{{BillsMaster}}
\date{{\today}}

% --- 文档正文 ---
\begin{{document}}
\maketitle
"""
        self._latex_footer = r"\end{document}"

    def add_book(self, book):
        """添加一本书到待处理列表。"""
        if isinstance(book, Book):
            self.books.append(book)
        else:
            print("错误：只能添加 Book 类的实例。")

    def add_font(self, command_name, font_name):
        """
        添加一个字体定义。
        :param command_name: 在 LaTeX 中使用的命令名 (例如 "italianfont")
        :param font_name: 字体在系统中的名称 (例如 "TeX Gyre Chorus")
        """
        definition = f"\\newfontfamily\\{command_name}{{{font_name}}}"
        self.font_definitions.append(definition)

    def _generate_content(self):
        """私有方法，用于生成所有书目的 LaTeX 内容。"""
        content_parts = []
        for book in self.books:
            section = f"""
\\hrulefill

\\begin{{center}}
    \\Large\\bfseries << {book.title} >> \\\\
    \\mdseries --- {book.author}
\\end{{center}}
\\vspace{{1em}}
"""
            if book.font_command:
                section += f"{book.font_command}\n{book.quote}\n}}"
            else:
                section += book.quote
            content_parts.append(section)
        return "\n".join(content_parts)

    def generate_and_compile(self):
        """生成 .tex 文件并自动编译成 PDF。"""
        font_defs_string = "\n".join(self.font_definitions)
        final_header = self._latex_header_template.format(font_definitions=font_defs_string)
        
        final_content = final_header + self._generate_content() + self._latex_footer
        try:
            with open(self.tex_filename, "w", encoding="utf-8") as f:
                f.write(final_content)
            print(f"成功！已生成文件： {self.tex_filename}")
        except IOError as e:
            print(f"写入文件时发生错误: {e}")
            return

        print("\n开始编译 LaTeX 文件...")
        if not shutil.which("xelatex"):
            print("\n错误：找不到 'xelatex' 命令。")
            return

        for i in range(2):
            print(f"\n--- 第 {i+1} 次编译 ---")
            result = subprocess.run(
                ["xelatex", "-interaction=nonstopmode", self.tex_filename],
                capture_output=True,
                text=True,
                encoding='utf-8'
            )
            if result.returncode != 0:
                print(f"编译失败！错误码: {result.returncode}")
                print("\n--- LaTeX 编译日志 ---")
                print(result.stdout)
                return
        
        print("\n-------------------------")
        print(f"编译成功！最终的 PDF 文件是： {self.output_filename_base}.pdf")
        print("-------------------------")


# --- 主程序入口 ---
if __name__ == "__main__":
    
    my_generator = TexGenerator()

    my_generator.add_font("italianfont", "TeX Gyre Chorus")
    my_generator.add_font("gothicfont", "UnifrakturMaguntia-Regular.ttf")
    my_generator.add_font("ElegantSerif", "Noto Serif SC")

    my_generator.add_book(Book(
        title="1984",
        author="George Orwell",
        quote="It was a bright cold day in April, and the clocks were striking thirteen.",
        font_command=r"{\italianfont\Large"
    ))

    my_generator.add_book(Book(
        title="Moby-Dick; or, The Whale",
        author="Herman Melville",
        quote="To the last I grapple with thee; from hell's heart I stab at thee; for hate's sake I spit my last breath at thee.",
        font_command=r"{\gothicfont\fontsize{16}{20}\selectfont"
    ))

    my_generator.add_book(Book(
        title="Pride and Prejudice",
        author="Jane Austen",
        quote=r"\textit{It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.}"
    ))

    my_generator.generate_and_compile()