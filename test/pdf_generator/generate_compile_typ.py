# typst_font_tester.py
import subprocess
import shutil
import os

class TypstFontTester:
    """一个专门用于测试单个字体的类，生成 Typst 文件并编译。"""

    def __init__(self, font_name, text_to_render, output_filename="typst_font_test"):
        """
        初始化字体测试器。
        :param font_name: 要测试的字体的名称 (例如 "Noto Serif SC")。
        :param text_to_render: 要用该字体渲染的文本。
        :param output_filename: 输出的 .typ 和 .pdf 文件名（不含扩展名）。
        """
        self.font_name = font_name
        self.text_to_render = text_to_render
        self.output_filename_base = output_filename
        self.typ_filename = f"{self.output_filename_base}.typ"

    def _generate_typst_content(self):
        """生成 .typ 文件的完整内容。"""
        # Typst 的模板语法非常简洁
        template = f"""
// --- Auto-generated by Python ---

// 设置文档的默认字体
#set text(font: "{self.font_name}", size: 12pt)

// 设置页面标题
#set document(title: "Font Test: {self.font_name}", author: "BillsMaster")

// 文档主标题
= Font Test: {self.font_name}

// 分割线
#line(length: 100%)

// 渲染的测试文本
#block(inset: 1em)[
    #text(size: 18pt)[
        {self.text_to_render}
    ]
]

#line(length: 100%)
"""
        return template

    def generate_and_compile(self):
        """生成 .typ 文件并自动编译成 PDF。"""
        # 1. 生成并写入 .typ 文件
        final_content = self._generate_typst_content()
        try:
            with open(self.typ_filename, "w", encoding="utf-8") as f:
                f.write(final_content)
            print(f"成功！已生成测试文件： {self.typ_filename}")
        except IOError as e:
            print(f"写入文件时发生错误: {e}")
            return False

        # 2. 编译 .typ 文件
        print(f"\n开始使用字体 '{self.font_name}' 进行编译...")
        if not shutil.which("typst"):
            print("\n错误：找不到 'typst' 命令。")
            print("请确保您已经通过包管理器或官方渠道安装了 Typst。")
            return False

        print("--- 开始编译 ---")
        result = subprocess.run(
            ["typst", "compile", self.typ_filename],
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        if result.returncode != 0:
            print(f"编译失败！错误码: {result.returncode}")
            print("\n--- Typst 编译日志 ---")
            print(result.stderr) # Typst 的错误信息通常在 stderr
            return False

        print("\n-------------------------")
        print(f"编译成功！PDF 文件是： {self.output_filename_base}.pdf")
        print("-------------------------")
        return True

# --- 主程序入口 ---
if __name__ == "__main__":
    
    # 创建 FontTester 实例来测试 Noto Serif SC 字体
    tester = TypstFontTester(
        font_name="Noto Serif SC",
        text_to_render="The quick brown fox jumps over the lazy dog."
    )

    # 执行生成和编译
    tester.generate_and_compile()